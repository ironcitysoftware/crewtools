// Copyright 2018 Iron City Software LLC
//
// This file is part of CrewTools.
//
// CrewTools is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CrewTools is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CrewTools.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto2";

package crewtools_rpc;

option java_package = "crewtools.rpc";
option java_outer_classname = "Proto";

// Autobidder RPC

message AutobidderRequest {
  optional bool status = 1;
  optional bool health = 2;
  repeated string compare_trip = 3;
}

message AutobidderResponse {
  optional bool healthy = 1;
  repeated ScoreExplanation score_explanation = 2;
  optional Status status = 3;
  optional string error = 4;
}

message ScoreExplanation {
  repeated string line = 1;
}

message Status {
  optional int32 num_email = 1;
  optional int32 num_opentime = 2;
  optional int32 num_swaps = 3;
  optional ScheduleNode root = 4;
}

message ScheduleNode {
  repeated string trip = 1;
  repeated ScheduleNode child = 2;
  optional string credit = 3;
}

// TODO better home
// Configuration

message BidConfig {
  // Turns to these airports are preferred.
  repeated string favorite_turn = 1;

  // Overnights at these airports are preferred.
  repeated string favorite_overnight = 2;

  // If there is baggage in the schedule, swap it away, even if
  // the resulting trip is scored lower than the non-baggage trip
  // which was given away.
  optional bool discard_baggage_regardless_of_score = 3;

  // Scheduled vacation days.
  // TODO: read from schedule.
  // eg 2020-4-1
  repeated string vacation_date = 4;

  // Monthly bidding: lines will be disqualified from consideration
  // if any trips on that line span a desired day off.
  repeated string required_day_off = 5;

  // The minimum number of credit hours the contract allows per month.
  optional int32 minimum_credit_hours = 6;

  // The minimum number of trips required to achieve minimum_credit_hours.
  optional int32 minimum_number_of_trips = 7;

  // The target year-month (eg 2018-5)
  optional string year_month = 8;

  // Enable experimental feature of considering long sits in scoring.
  optional bool enable_efficiency_score = 9;

  // The autobidder will select the least-credit trips as baggage.
  // Override this behavior by explicitly specifying baggage trips.
  // 17May:L1234
  repeated string UNUSED_baggage_pairing_key = 10;

  // Enable experimental feature for handling approved transitions.
  optional bool enable_reroot_on_approved_transition = 11;

  // "New" way to adjust scoring.
  repeated ScoreAdjustment score_adjustment = 12;

  // Ordered list of line names which trumps normal monthly bidding.
  repeated string monthly_bid_override = 13;

  optional string award_domicile = 14;
  optional string rank = 15;

  repeated PairingOverride pairing_override = 16;

  optional int32 round = 17;

  optional bool enable_recursive_swaps = 18;

  optional bool enable_carry_ins_respect_required_days_off = 19;

  optional bool enable_all_trips_respect_required_days_off = 20;

  optional bool enable_monthly_sort_by_credit = 21;

  optional bool enable_monthly_preferred_overnights_are_desirable = 22;

  optional string preferred_origin_airport_code = 23;

  optional string notification_from_address = 24;
  optional string notification_to_address = 25;

  optional bool enable_monthly_sort_by_desirable = 26;

  optional bool enable_allow_two_hundred_trips = 27;

  optional bool enable_ding_partial_trips = 28;

  optional bool enable_multiple_adds = 29;

  // Turns to these airports are discouraged.
  repeated string despised_turn = 30;

  // Minimum number of days between trips.
  optional int32 minimum_number_of_days_between_trips = 31;

  // Maximum number of trips to add per swap.
  optional int32 maximum_number_of_adds_per_swap = 32;

  // Required drops / forbidden pairing keys.  2018-1-1:L1234
  repeated string required_drop_pairing_key = 33;

  repeated string loser_line = 34;

  optional bool enable_trip_length_scoring = 35;

  optional bool enable_weekend_work_scoring = 36;
}

message ScoreAdjustment {
  optional int32 score_adjustment = 1;
  repeated int32 crew_employee_id = 2;
  repeated string soft_day_off = 3;  // 2019-01-01
  optional bool prefer_weekdays = 4;
  optional bool prefer_weekends = 5;
}

message PairingOverride {
  optional string pairing_name = 1;
  optional string operates_except = 2;
  optional string operates = 3;
  optional string day_of_week = 4;
}

message GridObservation {
  optional int64 observation_time = 1;
  optional int32 year = 2;
  optional int32 month = 3;
  optional string domicile = 4;
  optional string rank = 5;
  repeated Observation observation = 6;
}

message Observation {
  optional int32 month = 1;
  optional int32 day = 2;
  optional int32 available_reserve = 3;
  optional int32 open_duty_periods = 4;
  optional int32 min_required = 5;
}

// Open duty period discrepancy reporter RPC

message ReportRequest {
  optional string flica_username = 1;
  optional string flica_password = 2;
  enum RequestType {
    OPEN_DUTY_PERIOD_DISCREPANCY_REPORT = 1;
  }
  optional RequestType request_type = 3;
  optional string year_month = 4;
  optional string rank = 5;
  repeated string award_domicile = 6;
  optional bool ignore_trailing_duty_day = 7;
}

message ReportResponse {
  optional string error = 1;
  optional string html = 2;
}

// Flight timetables

message FlightListFile {
  repeated FlightList flight_list = 1;
}

message FlightList {
  optional string origin = 1;
  optional string destination = 2;
  optional string date = 3;
  repeated Flight flight = 4;
}

message Flight {
  optional string flight_number = 1;
  optional string departure_timestamp = 2;
  optional string arrival_timestamp = 3;
}
